// https://github.com/yosupo06/library-checker-judge/blob/68c48117ef1d6429ae0a14dbd73bd8beb6835c4d/api/proto/library_checker.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: librarychecker/library_checker.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SolvedStatus int32

const (
	SolvedStatus_UNKNOWN   SolvedStatus = 0
	SolvedStatus_LATEST_AC SolvedStatus = 1
	SolvedStatus_AC        SolvedStatus = 2
)

// Enum value maps for SolvedStatus.
var (
	SolvedStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "LATEST_AC",
		2: "AC",
	}
	SolvedStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"LATEST_AC": 1,
		"AC":        2,
	}
)

func (x SolvedStatus) Enum() *SolvedStatus {
	p := new(SolvedStatus)
	*p = x
	return p
}

func (x SolvedStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolvedStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_librarychecker_library_checker_proto_enumTypes[0].Descriptor()
}

func (SolvedStatus) Type() protoreflect.EnumType {
	return &file_librarychecker_library_checker_proto_enumTypes[0]
}

func (x SolvedStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolvedStatus.Descriptor instead.
func (SolvedStatus) EnumDescriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{0}
}

type RegisterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // "newuser"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RegisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{1}
}

type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LibraryUrl    string                 `protobuf:"bytes,4,opt,name=library_url,json=libraryUrl,proto3" json:"library_url,omitempty"`
	IsDeveloper   bool                   `protobuf:"varint,5,opt,name=is_developer,json=isDeveloper,proto3" json:"is_developer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetLibraryUrl() string {
	if x != nil {
		return x.LibraryUrl
	}
	return ""
}

func (x *User) GetIsDeveloper() bool {
	if x != nil {
		return x.IsDeveloper
	}
	return false
}

type CurrentUserInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrentUserInfoRequest) Reset() {
	*x = CurrentUserInfoRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrentUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentUserInfoRequest) ProtoMessage() {}

func (x *CurrentUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentUserInfoRequest.ProtoReflect.Descriptor instead.
func (*CurrentUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{3}
}

type CurrentUserInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrentUserInfoResponse) Reset() {
	*x = CurrentUserInfoResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrentUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentUserInfoResponse) ProtoMessage() {}

func (x *CurrentUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentUserInfoResponse.ProtoReflect.Descriptor instead.
func (*CurrentUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{4}
}

func (x *CurrentUserInfoResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ChangeCurrentUserInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeCurrentUserInfoRequest) Reset() {
	*x = ChangeCurrentUserInfoRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeCurrentUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeCurrentUserInfoRequest) ProtoMessage() {}

func (x *ChangeCurrentUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeCurrentUserInfoRequest.ProtoReflect.Descriptor instead.
func (*ChangeCurrentUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeCurrentUserInfoRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ChangeCurrentUserInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeCurrentUserInfoResponse) Reset() {
	*x = ChangeCurrentUserInfoResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeCurrentUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeCurrentUserInfoResponse) ProtoMessage() {}

func (x *ChangeCurrentUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeCurrentUserInfoResponse.ProtoReflect.Descriptor instead.
func (*ChangeCurrentUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{6}
}

type UserInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // if empty, return self information
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfoRequest) Reset() {
	*x = UserInfoRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoRequest) ProtoMessage() {}

func (x *UserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoRequest.ProtoReflect.Descriptor instead.
func (*UserInfoRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UserInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in librarychecker/library_checker.proto.
	IsAdmin       bool                    `protobuf:"varint,1,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	User          *User                   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	SolvedMap     map[string]SolvedStatus `protobuf:"bytes,3,rep,name=solved_map,json=solvedMap,proto3" json:"solved_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=librarychecker.SolvedStatus"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfoResponse) Reset() {
	*x = UserInfoResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoResponse) ProtoMessage() {}

func (x *UserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoResponse.ProtoReflect.Descriptor instead.
func (*UserInfoResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{8}
}

// Deprecated: Marked as deprecated in librarychecker/library_checker.proto.
func (x *UserInfoResponse) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *UserInfoResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserInfoResponse) GetSolvedMap() map[string]SolvedStatus {
	if x != nil {
		return x.SolvedMap
	}
	return nil
}

type ChangeUserInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeUserInfoRequest) Reset() {
	*x = ChangeUserInfoRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeUserInfoRequest) ProtoMessage() {}

func (x *ChangeUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeUserInfoRequest.ProtoReflect.Descriptor instead.
func (*ChangeUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{9}
}

func (x *ChangeUserInfoRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ChangeUserInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeUserInfoResponse) Reset() {
	*x = ChangeUserInfoResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeUserInfoResponse) ProtoMessage() {}

func (x *ChangeUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeUserInfoResponse.ProtoReflect.Descriptor instead.
func (*ChangeUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{10}
}

type Problem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // "aplusb"
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"` // "A + B"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Problem) Reset() {
	*x = Problem{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{11}
}

func (x *Problem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Problem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ProblemListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemListRequest) Reset() {
	*x = ProblemListRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemListRequest) ProtoMessage() {}

func (x *ProblemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemListRequest.ProtoReflect.Descriptor instead.
func (*ProblemListRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{12}
}

type ProblemListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Problems      []*Problem             `protobuf:"bytes,1,rep,name=problems,proto3" json:"problems,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemListResponse) Reset() {
	*x = ProblemListResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemListResponse) ProtoMessage() {}

func (x *ProblemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemListResponse.ProtoReflect.Descriptor instead.
func (*ProblemListResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{13}
}

func (x *ProblemListResponse) GetProblems() []*Problem {
	if x != nil {
		return x.Problems
	}
	return nil
}

type ProblemInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // "aplusb"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemInfoRequest) Reset() {
	*x = ProblemInfoRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemInfoRequest) ProtoMessage() {}

func (x *ProblemInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemInfoRequest.ProtoReflect.Descriptor instead.
func (*ProblemInfoRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{14}
}

func (x *ProblemInfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProblemInfoResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Title            string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"` // "A + B"
	SourceUrl        string                 `protobuf:"bytes,5,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	TimeLimit        float64                `protobuf:"fixed64,3,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`                    // 2.0 = 2 seconds
	Version          string                 `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`                                           // problem version
	TestcasesVersion string                 `protobuf:"bytes,7,opt,name=testcases_version,json=testcasesVersion,proto3" json:"testcases_version,omitempty"` // testcases version
	OverallVersion   string                 `protobuf:"bytes,8,opt,name=overall_version,json=overallVersion,proto3" json:"overall_version,omitempty"`       // v4 overall version
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProblemInfoResponse) Reset() {
	*x = ProblemInfoResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemInfoResponse) ProtoMessage() {}

func (x *ProblemInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemInfoResponse.ProtoReflect.Descriptor instead.
func (*ProblemInfoResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{15}
}

func (x *ProblemInfoResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProblemInfoResponse) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *ProblemInfoResponse) GetTimeLimit() float64 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *ProblemInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProblemInfoResponse) GetTestcasesVersion() string {
	if x != nil {
		return x.TestcasesVersion
	}
	return ""
}

func (x *ProblemInfoResponse) GetOverallVersion() string {
	if x != nil {
		return x.OverallVersion
	}
	return ""
}

// --- Category ---
type ProblemCategory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`       // "Data Structure"
	Problems      []string               `protobuf:"bytes,2,rep,name=problems,proto3" json:"problems,omitempty"` // "[associative_array, unionfind, ...]"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemCategory) Reset() {
	*x = ProblemCategory{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemCategory) ProtoMessage() {}

func (x *ProblemCategory) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemCategory.ProtoReflect.Descriptor instead.
func (*ProblemCategory) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{16}
}

func (x *ProblemCategory) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProblemCategory) GetProblems() []string {
	if x != nil {
		return x.Problems
	}
	return nil
}

type ProblemCategoriesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemCategoriesRequest) Reset() {
	*x = ProblemCategoriesRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemCategoriesRequest) ProtoMessage() {}

func (x *ProblemCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemCategoriesRequest.ProtoReflect.Descriptor instead.
func (*ProblemCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{17}
}

type ProblemCategoriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Categories    []*ProblemCategory     `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProblemCategoriesResponse) Reset() {
	*x = ProblemCategoriesResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemCategoriesResponse) ProtoMessage() {}

func (x *ProblemCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemCategoriesResponse.ProtoReflect.Descriptor instead.
func (*ProblemCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{18}
}

func (x *ProblemCategoriesResponse) GetCategories() []*ProblemCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

type SubmitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Problem       string                 `protobuf:"bytes,1,opt,name=problem,proto3" json:"problem,omitempty"`                             // "aplusb"
	Source        string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                               // "int main() ..."
	Lang          string                 `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`                                   // "cpp"
	TleKnockout   bool                   `protobuf:"varint,4,opt,name=tle_knockout,json=tleKnockout,proto3" json:"tle_knockout,omitempty"` // special feature: default false (normal behavior), when true stops execution on first TLE
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitRequest) Reset() {
	*x = SubmitRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitRequest) ProtoMessage() {}

func (x *SubmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitRequest.ProtoReflect.Descriptor instead.
func (*SubmitRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{19}
}

func (x *SubmitRequest) GetProblem() string {
	if x != nil {
		return x.Problem
	}
	return ""
}

func (x *SubmitRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SubmitRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *SubmitRequest) GetTleKnockout() bool {
	if x != nil {
		return x.TleKnockout
	}
	return false
}

type SubmitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // submission id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitResponse) Reset() {
	*x = SubmitResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitResponse) ProtoMessage() {}

func (x *SubmitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitResponse.ProtoReflect.Descriptor instead.
func (*SubmitResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{20}
}

func (x *SubmitResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubmissionOverview struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                        // submission id
	ProblemName    string                 `protobuf:"bytes,2,opt,name=problem_name,json=problemName,proto3" json:"problem_name,omitempty"`    // "aplusb"
	ProblemTitle   string                 `protobuf:"bytes,3,opt,name=problem_title,json=problemTitle,proto3" json:"problem_title,omitempty"` // "A + B"
	UserName       string                 `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`             // "admin"
	Lang           string                 `protobuf:"bytes,5,opt,name=lang,proto3" json:"lang,omitempty"`                                     // "cpp"
	IsLatest       bool                   `protobuf:"varint,6,opt,name=is_latest,json=isLatest,proto3" json:"is_latest,omitempty"`
	Status         string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"` // "AC"
	Hacked         bool                   `protobuf:"varint,10,opt,name=hacked,proto3" json:"hacked,omitempty"`
	Time           float64                `protobuf:"fixed64,8,opt,name=time,proto3" json:"time,omitempty"`    // 2.0 = 2 seconds
	Memory         int64                  `protobuf:"varint,9,opt,name=memory,proto3" json:"memory,omitempty"` // x bytes
	SubmissionTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=submission_time,json=submissionTime,proto3" json:"submission_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubmissionOverview) Reset() {
	*x = SubmissionOverview{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmissionOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionOverview) ProtoMessage() {}

func (x *SubmissionOverview) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionOverview.ProtoReflect.Descriptor instead.
func (*SubmissionOverview) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{21}
}

func (x *SubmissionOverview) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubmissionOverview) GetProblemName() string {
	if x != nil {
		return x.ProblemName
	}
	return ""
}

func (x *SubmissionOverview) GetProblemTitle() string {
	if x != nil {
		return x.ProblemTitle
	}
	return ""
}

func (x *SubmissionOverview) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SubmissionOverview) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *SubmissionOverview) GetIsLatest() bool {
	if x != nil {
		return x.IsLatest
	}
	return false
}

func (x *SubmissionOverview) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SubmissionOverview) GetHacked() bool {
	if x != nil {
		return x.Hacked
	}
	return false
}

func (x *SubmissionOverview) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SubmissionOverview) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *SubmissionOverview) GetSubmissionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmissionTime
	}
	return nil
}

type SubmissionCaseResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Case          string                 `protobuf:"bytes,1,opt,name=case,proto3" json:"case,omitempty"`                               // "example_00.in"
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                           // "AC"
	Time          float64                `protobuf:"fixed64,3,opt,name=time,proto3" json:"time,omitempty"`                             // 2.0( = 2 seconds)
	Memory        int64                  `protobuf:"varint,4,opt,name=memory,proto3" json:"memory,omitempty"`                          // x bytes
	Stderr        []byte                 `protobuf:"bytes,5,opt,name=stderr,proto3" json:"stderr,omitempty"`                           // stderr of user solution
	CheckerOut    []byte                 `protobuf:"bytes,6,opt,name=checker_out,json=checkerOut,proto3" json:"checker_out,omitempty"` // stderr of checker
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmissionCaseResult) Reset() {
	*x = SubmissionCaseResult{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmissionCaseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionCaseResult) ProtoMessage() {}

func (x *SubmissionCaseResult) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionCaseResult.ProtoReflect.Descriptor instead.
func (*SubmissionCaseResult) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{22}
}

func (x *SubmissionCaseResult) GetCase() string {
	if x != nil {
		return x.Case
	}
	return ""
}

func (x *SubmissionCaseResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SubmissionCaseResult) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SubmissionCaseResult) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *SubmissionCaseResult) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *SubmissionCaseResult) GetCheckerOut() []byte {
	if x != nil {
		return x.CheckerOut
	}
	return nil
}

type SubmissionInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // submission id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmissionInfoRequest) Reset() {
	*x = SubmissionInfoRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmissionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionInfoRequest) ProtoMessage() {}

func (x *SubmissionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionInfoRequest.ProtoReflect.Descriptor instead.
func (*SubmissionInfoRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{23}
}

func (x *SubmissionInfoRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubmissionInfoResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Overview      *SubmissionOverview     `protobuf:"bytes,1,opt,name=overview,proto3" json:"overview,omitempty"`
	CaseResults   []*SubmissionCaseResult `protobuf:"bytes,2,rep,name=case_results,json=caseResults,proto3" json:"case_results,omitempty"`
	Source        string                  `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"` // "source"
	CompileError  []byte                  `protobuf:"bytes,5,opt,name=compile_error,json=compileError,proto3" json:"compile_error,omitempty"`
	CanRejudge    bool                    `protobuf:"varint,4,opt,name=can_rejudge,json=canRejudge,proto3" json:"can_rejudge,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmissionInfoResponse) Reset() {
	*x = SubmissionInfoResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmissionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionInfoResponse) ProtoMessage() {}

func (x *SubmissionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionInfoResponse.ProtoReflect.Descriptor instead.
func (*SubmissionInfoResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{24}
}

func (x *SubmissionInfoResponse) GetOverview() *SubmissionOverview {
	if x != nil {
		return x.Overview
	}
	return nil
}

func (x *SubmissionInfoResponse) GetCaseResults() []*SubmissionCaseResult {
	if x != nil {
		return x.CaseResults
	}
	return nil
}

func (x *SubmissionInfoResponse) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SubmissionInfoResponse) GetCompileError() []byte {
	if x != nil {
		return x.CompileError
	}
	return nil
}

func (x *SubmissionInfoResponse) GetCanRejudge() bool {
	if x != nil {
		return x.CanRejudge
	}
	return false
}

type SubmissionListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Skip          uint32                 `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`                            // fetch [skip, skip + limit)-th submissions
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`                          // # of submissions (max 1000)
	Problem       string                 `protobuf:"bytes,3,opt,name=problem,proto3" json:"problem,omitempty"`                       // "aplusb"(filter)
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                         // "AC"(filter)
	Hacked        bool                   `protobuf:"varint,7,opt,name=hacked,proto3" json:"hacked,omitempty"`                        // (filter)
	User          string                 `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`                             // "admin"(filter)
	DedupUser     bool                   `protobuf:"varint,9,opt,name=dedup_user,json=dedupUser,proto3" json:"dedup_user,omitempty"` // dedup same user or not
	Lang          string                 `protobuf:"bytes,8,opt,name=lang,proto3" json:"lang,omitempty"`                             // "cpp"(filter)
	Order         string                 `protobuf:"bytes,6,opt,name=order,proto3" json:"order,omitempty"`                           // sort order (default: "-id", "time")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmissionListRequest) Reset() {
	*x = SubmissionListRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmissionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionListRequest) ProtoMessage() {}

func (x *SubmissionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionListRequest.ProtoReflect.Descriptor instead.
func (*SubmissionListRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{25}
}

func (x *SubmissionListRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *SubmissionListRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SubmissionListRequest) GetProblem() string {
	if x != nil {
		return x.Problem
	}
	return ""
}

func (x *SubmissionListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SubmissionListRequest) GetHacked() bool {
	if x != nil {
		return x.Hacked
	}
	return false
}

func (x *SubmissionListRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *SubmissionListRequest) GetDedupUser() bool {
	if x != nil {
		return x.DedupUser
	}
	return false
}

func (x *SubmissionListRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *SubmissionListRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type SubmissionListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Submissions   []*SubmissionOverview  `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` // # of submissions(skip/limit don't effect this)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmissionListResponse) Reset() {
	*x = SubmissionListResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmissionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionListResponse) ProtoMessage() {}

func (x *SubmissionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionListResponse.ProtoReflect.Descriptor instead.
func (*SubmissionListResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{26}
}

func (x *SubmissionListResponse) GetSubmissions() []*SubmissionOverview {
	if x != nil {
		return x.Submissions
	}
	return nil
}

func (x *SubmissionListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RejudgeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // submission id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejudgeRequest) Reset() {
	*x = RejudgeRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejudgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejudgeRequest) ProtoMessage() {}

func (x *RejudgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejudgeRequest.ProtoReflect.Descriptor instead.
func (*RejudgeRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{27}
}

func (x *RejudgeRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RejudgeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RejudgeResponse) Reset() {
	*x = RejudgeResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejudgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejudgeResponse) ProtoMessage() {}

func (x *RejudgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejudgeResponse.ProtoReflect.Descriptor instead.
func (*RejudgeResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{28}
}

type HackRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Submission int32                  `protobuf:"varint,1,opt,name=submission,proto3" json:"submission,omitempty"` // submission id
	// Types that are valid to be assigned to TestCase:
	//
	//	*HackRequest_Txt
	//	*HackRequest_Cpp
	TestCase      isHackRequest_TestCase `protobuf_oneof:"test_case"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HackRequest) Reset() {
	*x = HackRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HackRequest) ProtoMessage() {}

func (x *HackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HackRequest.ProtoReflect.Descriptor instead.
func (*HackRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{29}
}

func (x *HackRequest) GetSubmission() int32 {
	if x != nil {
		return x.Submission
	}
	return 0
}

func (x *HackRequest) GetTestCase() isHackRequest_TestCase {
	if x != nil {
		return x.TestCase
	}
	return nil
}

func (x *HackRequest) GetTxt() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*HackRequest_Txt); ok {
			return x.Txt
		}
	}
	return nil
}

func (x *HackRequest) GetCpp() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*HackRequest_Cpp); ok {
			return x.Cpp
		}
	}
	return nil
}

type isHackRequest_TestCase interface {
	isHackRequest_TestCase()
}

type HackRequest_Txt struct {
	Txt []byte `protobuf:"bytes,2,opt,name=txt,proto3,oneof"`
}

type HackRequest_Cpp struct {
	Cpp []byte `protobuf:"bytes,3,opt,name=cpp,proto3,oneof"`
}

func (*HackRequest_Txt) isHackRequest_TestCase() {}

func (*HackRequest_Cpp) isHackRequest_TestCase() {}

type HackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // submission id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HackResponse) Reset() {
	*x = HackResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HackResponse) ProtoMessage() {}

func (x *HackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HackResponse.ProtoReflect.Descriptor instead.
func (*HackResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{30}
}

func (x *HackResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HackInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // submission id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HackInfoRequest) Reset() {
	*x = HackInfoRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HackInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HackInfoRequest) ProtoMessage() {}

func (x *HackInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HackInfoRequest.ProtoReflect.Descriptor instead.
func (*HackInfoRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{31}
}

func (x *HackInfoRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type HackInfoResponse struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Overview *HackOverview          `protobuf:"bytes,1,opt,name=overview,proto3" json:"overview,omitempty"`
	// Types that are valid to be assigned to TestCase:
	//
	//	*HackInfoResponse_Txt
	//	*HackInfoResponse_Cpp
	TestCase      isHackInfoResponse_TestCase `protobuf_oneof:"test_case"`
	Stderr        []byte                      `protobuf:"bytes,4,opt,name=stderr,proto3,oneof" json:"stderr,omitempty"`                              // stderr of the solution
	JudgeOutput   []byte                      `protobuf:"bytes,5,opt,name=judge_output,json=judgeOutput,proto3,oneof" json:"judge_output,omitempty"` // (CE, Verifier output, Checker output)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HackInfoResponse) Reset() {
	*x = HackInfoResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HackInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HackInfoResponse) ProtoMessage() {}

func (x *HackInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HackInfoResponse.ProtoReflect.Descriptor instead.
func (*HackInfoResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{32}
}

func (x *HackInfoResponse) GetOverview() *HackOverview {
	if x != nil {
		return x.Overview
	}
	return nil
}

func (x *HackInfoResponse) GetTestCase() isHackInfoResponse_TestCase {
	if x != nil {
		return x.TestCase
	}
	return nil
}

func (x *HackInfoResponse) GetTxt() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*HackInfoResponse_Txt); ok {
			return x.Txt
		}
	}
	return nil
}

func (x *HackInfoResponse) GetCpp() []byte {
	if x != nil {
		if x, ok := x.TestCase.(*HackInfoResponse_Cpp); ok {
			return x.Cpp
		}
	}
	return nil
}

func (x *HackInfoResponse) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *HackInfoResponse) GetJudgeOutput() []byte {
	if x != nil {
		return x.JudgeOutput
	}
	return nil
}

type isHackInfoResponse_TestCase interface {
	isHackInfoResponse_TestCase()
}

type HackInfoResponse_Txt struct {
	Txt []byte `protobuf:"bytes,2,opt,name=txt,proto3,oneof"`
}

type HackInfoResponse_Cpp struct {
	Cpp []byte `protobuf:"bytes,3,opt,name=cpp,proto3,oneof"`
}

func (*HackInfoResponse_Txt) isHackInfoResponse_TestCase() {}

func (*HackInfoResponse_Cpp) isHackInfoResponse_TestCase() {}

type HackOverview struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         // hack id
	SubmissionId  int32                  `protobuf:"varint,2,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"` // submission id
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                                  // "AC"
	UserName      *string                `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`        // "yosupo"
	Time          *float64               `protobuf:"fixed64,5,opt,name=time,proto3,oneof" json:"time,omitempty"`                              // 2.0 = 2 seconds
	Memory        *int64                 `protobuf:"varint,6,opt,name=memory,proto3,oneof" json:"memory,omitempty"`                           // x bytes
	HackTime      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=hack_time,json=hackTime,proto3" json:"hack_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HackOverview) Reset() {
	*x = HackOverview{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HackOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HackOverview) ProtoMessage() {}

func (x *HackOverview) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HackOverview.ProtoReflect.Descriptor instead.
func (*HackOverview) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{33}
}

func (x *HackOverview) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HackOverview) GetSubmissionId() int32 {
	if x != nil {
		return x.SubmissionId
	}
	return 0
}

func (x *HackOverview) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HackOverview) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *HackOverview) GetTime() float64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *HackOverview) GetMemory() int64 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

func (x *HackOverview) GetHackTime() *timestamppb.Timestamp {
	if x != nil {
		return x.HackTime
	}
	return nil
}

type HackListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Skip          uint32                 `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`    // fetch [skip, skip + limit)-th hacks
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`  // # of hacks (max 1000)
	User          string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`     // "admin"(filter)
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"` // "AC"(filter)
	Order         string                 `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`   // sort order (default: "-id", "time")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HackListRequest) Reset() {
	*x = HackListRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HackListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HackListRequest) ProtoMessage() {}

func (x *HackListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HackListRequest.ProtoReflect.Descriptor instead.
func (*HackListRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{34}
}

func (x *HackListRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *HackListRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *HackListRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *HackListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HackListRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type HackListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hacks         []*HackOverview        `protobuf:"bytes,1,rep,name=hacks,proto3" json:"hacks,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` // # of hacks(skip/limit don't effect this)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HackListResponse) Reset() {
	*x = HackListResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HackListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HackListResponse) ProtoMessage() {}

func (x *HackListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HackListResponse.ProtoReflect.Descriptor instead.
func (*HackListResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{35}
}

func (x *HackListResponse) GetHacks() []*HackOverview {
	if x != nil {
		return x.Hacks
	}
	return nil
}

func (x *HackListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Lang struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // "cpp"
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       // "C++(default, C++17)"
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` // "ubuntu18.04 apt"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Lang) Reset() {
	*x = Lang{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Lang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lang) ProtoMessage() {}

func (x *Lang) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lang.ProtoReflect.Descriptor instead.
func (*Lang) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{36}
}

func (x *Lang) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Lang) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Lang) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type LangListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LangListRequest) Reset() {
	*x = LangListRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LangListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangListRequest) ProtoMessage() {}

func (x *LangListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangListRequest.ProtoReflect.Descriptor instead.
func (*LangListRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{37}
}

type LangListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Langs         []*Lang                `protobuf:"bytes,1,rep,name=langs,proto3" json:"langs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LangListResponse) Reset() {
	*x = LangListResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LangListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangListResponse) ProtoMessage() {}

func (x *LangListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangListResponse.ProtoReflect.Descriptor instead.
func (*LangListResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{38}
}

func (x *LangListResponse) GetLangs() []*Lang {
	if x != nil {
		return x.Langs
	}
	return nil
}

type UserStatistics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`    // "admin"
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` // 12 (AC)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserStatistics) Reset() {
	*x = UserStatistics{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatistics) ProtoMessage() {}

func (x *UserStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatistics.ProtoReflect.Descriptor instead.
func (*UserStatistics) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{39}
}

func (x *UserStatistics) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserStatistics) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RankingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Skip          uint32                 `protobuf:"varint,1,opt,name=skip,proto3" json:"skip,omitempty"`   // fetch [skip, skip + limit)-th users
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"` // # of users (max 1000, default 100)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RankingRequest) Reset() {
	*x = RankingRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RankingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankingRequest) ProtoMessage() {}

func (x *RankingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankingRequest.ProtoReflect.Descriptor instead.
func (*RankingRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{40}
}

func (x *RankingRequest) GetSkip() uint32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *RankingRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type RankingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statistics    []*UserStatistics      `protobuf:"bytes,1,rep,name=statistics,proto3" json:"statistics,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"` // total # of users (skip/limit don't affect this)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RankingResponse) Reset() {
	*x = RankingResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RankingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankingResponse) ProtoMessage() {}

func (x *RankingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankingResponse.ProtoReflect.Descriptor instead.
func (*RankingResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{41}
}

func (x *RankingResponse) GetStatistics() []*UserStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *RankingResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MonitoringRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitoringRequest) Reset() {
	*x = MonitoringRequest{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitoringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringRequest) ProtoMessage() {}

func (x *MonitoringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringRequest.ProtoReflect.Descriptor instead.
func (*MonitoringRequest) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{42}
}

type TaskQueueInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PendingTasks  int32                  `protobuf:"varint,1,opt,name=pending_tasks,json=pendingTasks,proto3" json:"pending_tasks,omitempty"` // number of pending tasks
	RunningTasks  int32                  `protobuf:"varint,2,opt,name=running_tasks,json=runningTasks,proto3" json:"running_tasks,omitempty"` // number of running tasks
	TotalTasks    int32                  `protobuf:"varint,3,opt,name=total_tasks,json=totalTasks,proto3" json:"total_tasks,omitempty"`       // total number of tasks in queue
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskQueueInfo) Reset() {
	*x = TaskQueueInfo{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueInfo) ProtoMessage() {}

func (x *TaskQueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueInfo.ProtoReflect.Descriptor instead.
func (*TaskQueueInfo) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{43}
}

func (x *TaskQueueInfo) GetPendingTasks() int32 {
	if x != nil {
		return x.PendingTasks
	}
	return 0
}

func (x *TaskQueueInfo) GetRunningTasks() int32 {
	if x != nil {
		return x.RunningTasks
	}
	return 0
}

func (x *TaskQueueInfo) GetTotalTasks() int32 {
	if x != nil {
		return x.TotalTasks
	}
	return 0
}

type MonitoringResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TotalUsers       int32                  `protobuf:"varint,1,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"`                   // total number of users
	TotalSubmissions int32                  `protobuf:"varint,2,opt,name=total_submissions,json=totalSubmissions,proto3" json:"total_submissions,omitempty"` // total number of submissions
	TaskQueue        *TaskQueueInfo         `protobuf:"bytes,3,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`                       // judge queue information
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MonitoringResponse) Reset() {
	*x = MonitoringResponse{}
	mi := &file_librarychecker_library_checker_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitoringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringResponse) ProtoMessage() {}

func (x *MonitoringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_librarychecker_library_checker_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringResponse.ProtoReflect.Descriptor instead.
func (*MonitoringResponse) Descriptor() ([]byte, []int) {
	return file_librarychecker_library_checker_proto_rawDescGZIP(), []int{44}
}

func (x *MonitoringResponse) GetTotalUsers() int32 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *MonitoringResponse) GetTotalSubmissions() int32 {
	if x != nil {
		return x.TotalSubmissions
	}
	return 0
}

func (x *MonitoringResponse) GetTaskQueue() *TaskQueueInfo {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

var File_librarychecker_library_checker_proto protoreflect.FileDescriptor

const file_librarychecker_library_checker_proto_rawDesc = "" +
	"\n" +
	"$librarychecker/library_checker.proto\x12\x0elibrarychecker\x1a\x1fgoogle/protobuf/timestamp.proto\"%\n" +
	"\x0fRegisterRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\x12\n" +
	"\x10RegisterResponse\"^\n" +
	"\x04User\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vlibrary_url\x18\x04 \x01(\tR\n" +
	"libraryUrl\x12!\n" +
	"\fis_developer\x18\x05 \x01(\bR\visDeveloper\"\x18\n" +
	"\x16CurrentUserInfoRequest\"C\n" +
	"\x17CurrentUserInfoResponse\x12(\n" +
	"\x04user\x18\x02 \x01(\v2\x14.librarychecker.UserR\x04user\"H\n" +
	"\x1cChangeCurrentUserInfoRequest\x12(\n" +
	"\x04user\x18\x01 \x01(\v2\x14.librarychecker.UserR\x04user\"\x1f\n" +
	"\x1dChangeCurrentUserInfoResponse\"%\n" +
	"\x0fUserInfoRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\x87\x02\n" +
	"\x10UserInfoResponse\x12\x1d\n" +
	"\bis_admin\x18\x01 \x01(\bB\x02\x18\x01R\aisAdmin\x12(\n" +
	"\x04user\x18\x02 \x01(\v2\x14.librarychecker.UserR\x04user\x12N\n" +
	"\n" +
	"solved_map\x18\x03 \x03(\v2/.librarychecker.UserInfoResponse.SolvedMapEntryR\tsolvedMap\x1aZ\n" +
	"\x0eSolvedMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\x0e2\x1c.librarychecker.SolvedStatusR\x05value:\x028\x01\"A\n" +
	"\x15ChangeUserInfoRequest\x12(\n" +
	"\x04user\x18\x01 \x01(\v2\x14.librarychecker.UserR\x04user\"\x18\n" +
	"\x16ChangeUserInfoResponse\"3\n" +
	"\aProblem\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\"\x14\n" +
	"\x12ProblemListRequest\"J\n" +
	"\x13ProblemListResponse\x123\n" +
	"\bproblems\x18\x01 \x03(\v2\x17.librarychecker.ProblemR\bproblems\"(\n" +
	"\x12ProblemInfoRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\xd9\x01\n" +
	"\x13ProblemInfoResponse\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12\x1d\n" +
	"\n" +
	"source_url\x18\x05 \x01(\tR\tsourceUrl\x12\x1d\n" +
	"\n" +
	"time_limit\x18\x03 \x01(\x01R\ttimeLimit\x12\x18\n" +
	"\aversion\x18\x06 \x01(\tR\aversion\x12+\n" +
	"\x11testcases_version\x18\a \x01(\tR\x10testcasesVersion\x12'\n" +
	"\x0foverall_version\x18\b \x01(\tR\x0eoverallVersion\"C\n" +
	"\x0fProblemCategory\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12\x1a\n" +
	"\bproblems\x18\x02 \x03(\tR\bproblems\"\x1a\n" +
	"\x18ProblemCategoriesRequest\"\\\n" +
	"\x19ProblemCategoriesResponse\x12?\n" +
	"\n" +
	"categories\x18\x01 \x03(\v2\x1f.librarychecker.ProblemCategoryR\n" +
	"categories\"x\n" +
	"\rSubmitRequest\x12\x18\n" +
	"\aproblem\x18\x01 \x01(\tR\aproblem\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12\x12\n" +
	"\x04lang\x18\x03 \x01(\tR\x04lang\x12!\n" +
	"\ftle_knockout\x18\x04 \x01(\bR\vtleKnockout\" \n" +
	"\x0eSubmitResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\"\xdb\x02\n" +
	"\x12SubmissionOverview\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12!\n" +
	"\fproblem_name\x18\x02 \x01(\tR\vproblemName\x12#\n" +
	"\rproblem_title\x18\x03 \x01(\tR\fproblemTitle\x12\x1b\n" +
	"\tuser_name\x18\x04 \x01(\tR\buserName\x12\x12\n" +
	"\x04lang\x18\x05 \x01(\tR\x04lang\x12\x1b\n" +
	"\tis_latest\x18\x06 \x01(\bR\bisLatest\x12\x16\n" +
	"\x06status\x18\a \x01(\tR\x06status\x12\x16\n" +
	"\x06hacked\x18\n" +
	" \x01(\bR\x06hacked\x12\x12\n" +
	"\x04time\x18\b \x01(\x01R\x04time\x12\x16\n" +
	"\x06memory\x18\t \x01(\x03R\x06memory\x12C\n" +
	"\x0fsubmission_time\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\x0esubmissionTime\"\xa7\x01\n" +
	"\x14SubmissionCaseResult\x12\x12\n" +
	"\x04case\x18\x01 \x01(\tR\x04case\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x12\n" +
	"\x04time\x18\x03 \x01(\x01R\x04time\x12\x16\n" +
	"\x06memory\x18\x04 \x01(\x03R\x06memory\x12\x16\n" +
	"\x06stderr\x18\x05 \x01(\fR\x06stderr\x12\x1f\n" +
	"\vchecker_out\x18\x06 \x01(\fR\n" +
	"checkerOut\"'\n" +
	"\x15SubmissionInfoRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\"\xff\x01\n" +
	"\x16SubmissionInfoResponse\x12>\n" +
	"\boverview\x18\x01 \x01(\v2\".librarychecker.SubmissionOverviewR\boverview\x12G\n" +
	"\fcase_results\x18\x02 \x03(\v2$.librarychecker.SubmissionCaseResultR\vcaseResults\x12\x16\n" +
	"\x06source\x18\x03 \x01(\tR\x06source\x12#\n" +
	"\rcompile_error\x18\x05 \x01(\fR\fcompileError\x12\x1f\n" +
	"\vcan_rejudge\x18\x04 \x01(\bR\n" +
	"canRejudge\"\xe8\x01\n" +
	"\x15SubmissionListRequest\x12\x12\n" +
	"\x04skip\x18\x01 \x01(\rR\x04skip\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\rR\x05limit\x12\x18\n" +
	"\aproblem\x18\x03 \x01(\tR\aproblem\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status\x12\x16\n" +
	"\x06hacked\x18\a \x01(\bR\x06hacked\x12\x12\n" +
	"\x04user\x18\x05 \x01(\tR\x04user\x12\x1d\n" +
	"\n" +
	"dedup_user\x18\t \x01(\bR\tdedupUser\x12\x12\n" +
	"\x04lang\x18\b \x01(\tR\x04lang\x12\x14\n" +
	"\x05order\x18\x06 \x01(\tR\x05order\"t\n" +
	"\x16SubmissionListResponse\x12D\n" +
	"\vsubmissions\x18\x01 \x03(\v2\".librarychecker.SubmissionOverviewR\vsubmissions\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\" \n" +
	"\x0eRejudgeRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\"\x11\n" +
	"\x0fRejudgeResponse\"b\n" +
	"\vHackRequest\x12\x1e\n" +
	"\n" +
	"submission\x18\x01 \x01(\x05R\n" +
	"submission\x12\x12\n" +
	"\x03txt\x18\x02 \x01(\fH\x00R\x03txt\x12\x12\n" +
	"\x03cpp\x18\x03 \x01(\fH\x00R\x03cppB\v\n" +
	"\ttest_case\"\x1e\n" +
	"\fHackResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\"!\n" +
	"\x0fHackInfoRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\"\xe2\x01\n" +
	"\x10HackInfoResponse\x128\n" +
	"\boverview\x18\x01 \x01(\v2\x1c.librarychecker.HackOverviewR\boverview\x12\x12\n" +
	"\x03txt\x18\x02 \x01(\fH\x00R\x03txt\x12\x12\n" +
	"\x03cpp\x18\x03 \x01(\fH\x00R\x03cpp\x12\x1b\n" +
	"\x06stderr\x18\x04 \x01(\fH\x01R\x06stderr\x88\x01\x01\x12&\n" +
	"\fjudge_output\x18\x05 \x01(\fH\x02R\vjudgeOutput\x88\x01\x01B\v\n" +
	"\ttest_caseB\t\n" +
	"\a_stderrB\x0f\n" +
	"\r_judge_output\"\x8e\x02\n" +
	"\fHackOverview\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12#\n" +
	"\rsubmission_id\x18\x02 \x01(\x05R\fsubmissionId\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12 \n" +
	"\tuser_name\x18\x04 \x01(\tH\x00R\buserName\x88\x01\x01\x12\x17\n" +
	"\x04time\x18\x05 \x01(\x01H\x01R\x04time\x88\x01\x01\x12\x1b\n" +
	"\x06memory\x18\x06 \x01(\x03H\x02R\x06memory\x88\x01\x01\x127\n" +
	"\thack_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\bhackTimeB\f\n" +
	"\n" +
	"_user_nameB\a\n" +
	"\x05_timeB\t\n" +
	"\a_memory\"}\n" +
	"\x0fHackListRequest\x12\x12\n" +
	"\x04skip\x18\x01 \x01(\rR\x04skip\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\rR\x05limit\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status\x12\x14\n" +
	"\x05order\x18\x05 \x01(\tR\x05order\"\\\n" +
	"\x10HackListResponse\x122\n" +
	"\x05hacks\x18\x01 \x03(\v2\x1c.librarychecker.HackOverviewR\x05hacks\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\"D\n" +
	"\x04Lang\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\"\x11\n" +
	"\x0fLangListRequest\">\n" +
	"\x10LangListResponse\x12*\n" +
	"\x05langs\x18\x01 \x03(\v2\x14.librarychecker.LangR\x05langs\":\n" +
	"\x0eUserStatistics\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\":\n" +
	"\x0eRankingRequest\x12\x12\n" +
	"\x04skip\x18\x01 \x01(\rR\x04skip\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\rR\x05limit\"g\n" +
	"\x0fRankingResponse\x12>\n" +
	"\n" +
	"statistics\x18\x01 \x03(\v2\x1e.librarychecker.UserStatisticsR\n" +
	"statistics\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\"\x13\n" +
	"\x11MonitoringRequest\"z\n" +
	"\rTaskQueueInfo\x12#\n" +
	"\rpending_tasks\x18\x01 \x01(\x05R\fpendingTasks\x12#\n" +
	"\rrunning_tasks\x18\x02 \x01(\x05R\frunningTasks\x12\x1f\n" +
	"\vtotal_tasks\x18\x03 \x01(\x05R\n" +
	"totalTasks\"\xa0\x01\n" +
	"\x12MonitoringResponse\x12\x1f\n" +
	"\vtotal_users\x18\x01 \x01(\x05R\n" +
	"totalUsers\x12+\n" +
	"\x11total_submissions\x18\x02 \x01(\x05R\x10totalSubmissions\x12<\n" +
	"\n" +
	"task_queue\x18\x03 \x01(\v2\x1d.librarychecker.TaskQueueInfoR\ttaskQueue*2\n" +
	"\fSolvedStatus\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\r\n" +
	"\tLATEST_AC\x10\x01\x12\x06\n" +
	"\x02AC\x10\x022\xd6\f\n" +
	"\x15LibraryCheckerService\x12O\n" +
	"\bRegister\x12\x1f.librarychecker.RegisterRequest\x1a .librarychecker.RegisterResponse\"\x00\x12d\n" +
	"\x0fCurrentUserInfo\x12&.librarychecker.CurrentUserInfoRequest\x1a'.librarychecker.CurrentUserInfoResponse\"\x00\x12v\n" +
	"\x15ChangeCurrentUserInfo\x12,.librarychecker.ChangeCurrentUserInfoRequest\x1a-.librarychecker.ChangeCurrentUserInfoResponse\"\x00\x12O\n" +
	"\bUserInfo\x12\x1f.librarychecker.UserInfoRequest\x1a .librarychecker.UserInfoResponse\"\x00\x12a\n" +
	"\x0eChangeUserInfo\x12%.librarychecker.ChangeUserInfoRequest\x1a&.librarychecker.ChangeUserInfoResponse\"\x00\x12X\n" +
	"\vProblemInfo\x12\".librarychecker.ProblemInfoRequest\x1a#.librarychecker.ProblemInfoResponse\"\x00\x12X\n" +
	"\vProblemList\x12\".librarychecker.ProblemListRequest\x1a#.librarychecker.ProblemListResponse\"\x00\x12j\n" +
	"\x11ProblemCategories\x12(.librarychecker.ProblemCategoriesRequest\x1a).librarychecker.ProblemCategoriesResponse\"\x00\x12I\n" +
	"\x06Submit\x12\x1d.librarychecker.SubmitRequest\x1a\x1e.librarychecker.SubmitResponse\"\x00\x12L\n" +
	"\aRejudge\x12\x1e.librarychecker.RejudgeRequest\x1a\x1f.librarychecker.RejudgeResponse\"\x00\x12a\n" +
	"\x0eSubmissionInfo\x12%.librarychecker.SubmissionInfoRequest\x1a&.librarychecker.SubmissionInfoResponse\"\x00\x12a\n" +
	"\x0eSubmissionList\x12%.librarychecker.SubmissionListRequest\x1a&.librarychecker.SubmissionListResponse\"\x00\x12C\n" +
	"\x04Hack\x12\x1b.librarychecker.HackRequest\x1a\x1c.librarychecker.HackResponse\"\x00\x12O\n" +
	"\bHackInfo\x12\x1f.librarychecker.HackInfoRequest\x1a .librarychecker.HackInfoResponse\"\x00\x12O\n" +
	"\bHackList\x12\x1f.librarychecker.HackListRequest\x1a .librarychecker.HackListResponse\"\x00\x12O\n" +
	"\bLangList\x12\x1f.librarychecker.LangListRequest\x1a .librarychecker.LangListResponse\"\x00\x12L\n" +
	"\aRanking\x12\x1e.librarychecker.RankingRequest\x1a\x1f.librarychecker.RankingResponse\"\x00\x12U\n" +
	"\n" +
	"Monitoring\x12!.librarychecker.MonitoringRequest\x1a\".librarychecker.MonitoringResponse\"\x00B\xb6\x01\n" +
	"\x12com.librarycheckerB\x13LibraryCheckerProtoP\x01Z3github.com/yosupo06/library-checker-judge/api/proto\xa2\x02\x03LXX\xaa\x02\x0eLibrarychecker\xca\x02\x0eLibrarychecker\xe2\x02\x1aLibrarychecker\\GPBMetadata\xea\x02\x0eLibrarycheckerb\x06proto3"

var (
	file_librarychecker_library_checker_proto_rawDescOnce sync.Once
	file_librarychecker_library_checker_proto_rawDescData []byte
)

func file_librarychecker_library_checker_proto_rawDescGZIP() []byte {
	file_librarychecker_library_checker_proto_rawDescOnce.Do(func() {
		file_librarychecker_library_checker_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_librarychecker_library_checker_proto_rawDesc), len(file_librarychecker_library_checker_proto_rawDesc)))
	})
	return file_librarychecker_library_checker_proto_rawDescData
}

var file_librarychecker_library_checker_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_librarychecker_library_checker_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_librarychecker_library_checker_proto_goTypes = []any{
	(SolvedStatus)(0),                     // 0: librarychecker.SolvedStatus
	(*RegisterRequest)(nil),               // 1: librarychecker.RegisterRequest
	(*RegisterResponse)(nil),              // 2: librarychecker.RegisterResponse
	(*User)(nil),                          // 3: librarychecker.User
	(*CurrentUserInfoRequest)(nil),        // 4: librarychecker.CurrentUserInfoRequest
	(*CurrentUserInfoResponse)(nil),       // 5: librarychecker.CurrentUserInfoResponse
	(*ChangeCurrentUserInfoRequest)(nil),  // 6: librarychecker.ChangeCurrentUserInfoRequest
	(*ChangeCurrentUserInfoResponse)(nil), // 7: librarychecker.ChangeCurrentUserInfoResponse
	(*UserInfoRequest)(nil),               // 8: librarychecker.UserInfoRequest
	(*UserInfoResponse)(nil),              // 9: librarychecker.UserInfoResponse
	(*ChangeUserInfoRequest)(nil),         // 10: librarychecker.ChangeUserInfoRequest
	(*ChangeUserInfoResponse)(nil),        // 11: librarychecker.ChangeUserInfoResponse
	(*Problem)(nil),                       // 12: librarychecker.Problem
	(*ProblemListRequest)(nil),            // 13: librarychecker.ProblemListRequest
	(*ProblemListResponse)(nil),           // 14: librarychecker.ProblemListResponse
	(*ProblemInfoRequest)(nil),            // 15: librarychecker.ProblemInfoRequest
	(*ProblemInfoResponse)(nil),           // 16: librarychecker.ProblemInfoResponse
	(*ProblemCategory)(nil),               // 17: librarychecker.ProblemCategory
	(*ProblemCategoriesRequest)(nil),      // 18: librarychecker.ProblemCategoriesRequest
	(*ProblemCategoriesResponse)(nil),     // 19: librarychecker.ProblemCategoriesResponse
	(*SubmitRequest)(nil),                 // 20: librarychecker.SubmitRequest
	(*SubmitResponse)(nil),                // 21: librarychecker.SubmitResponse
	(*SubmissionOverview)(nil),            // 22: librarychecker.SubmissionOverview
	(*SubmissionCaseResult)(nil),          // 23: librarychecker.SubmissionCaseResult
	(*SubmissionInfoRequest)(nil),         // 24: librarychecker.SubmissionInfoRequest
	(*SubmissionInfoResponse)(nil),        // 25: librarychecker.SubmissionInfoResponse
	(*SubmissionListRequest)(nil),         // 26: librarychecker.SubmissionListRequest
	(*SubmissionListResponse)(nil),        // 27: librarychecker.SubmissionListResponse
	(*RejudgeRequest)(nil),                // 28: librarychecker.RejudgeRequest
	(*RejudgeResponse)(nil),               // 29: librarychecker.RejudgeResponse
	(*HackRequest)(nil),                   // 30: librarychecker.HackRequest
	(*HackResponse)(nil),                  // 31: librarychecker.HackResponse
	(*HackInfoRequest)(nil),               // 32: librarychecker.HackInfoRequest
	(*HackInfoResponse)(nil),              // 33: librarychecker.HackInfoResponse
	(*HackOverview)(nil),                  // 34: librarychecker.HackOverview
	(*HackListRequest)(nil),               // 35: librarychecker.HackListRequest
	(*HackListResponse)(nil),              // 36: librarychecker.HackListResponse
	(*Lang)(nil),                          // 37: librarychecker.Lang
	(*LangListRequest)(nil),               // 38: librarychecker.LangListRequest
	(*LangListResponse)(nil),              // 39: librarychecker.LangListResponse
	(*UserStatistics)(nil),                // 40: librarychecker.UserStatistics
	(*RankingRequest)(nil),                // 41: librarychecker.RankingRequest
	(*RankingResponse)(nil),               // 42: librarychecker.RankingResponse
	(*MonitoringRequest)(nil),             // 43: librarychecker.MonitoringRequest
	(*TaskQueueInfo)(nil),                 // 44: librarychecker.TaskQueueInfo
	(*MonitoringResponse)(nil),            // 45: librarychecker.MonitoringResponse
	nil,                                   // 46: librarychecker.UserInfoResponse.SolvedMapEntry
	(*timestamppb.Timestamp)(nil),         // 47: google.protobuf.Timestamp
}
var file_librarychecker_library_checker_proto_depIdxs = []int32{
	3,  // 0: librarychecker.CurrentUserInfoResponse.user:type_name -> librarychecker.User
	3,  // 1: librarychecker.ChangeCurrentUserInfoRequest.user:type_name -> librarychecker.User
	3,  // 2: librarychecker.UserInfoResponse.user:type_name -> librarychecker.User
	46, // 3: librarychecker.UserInfoResponse.solved_map:type_name -> librarychecker.UserInfoResponse.SolvedMapEntry
	3,  // 4: librarychecker.ChangeUserInfoRequest.user:type_name -> librarychecker.User
	12, // 5: librarychecker.ProblemListResponse.problems:type_name -> librarychecker.Problem
	17, // 6: librarychecker.ProblemCategoriesResponse.categories:type_name -> librarychecker.ProblemCategory
	47, // 7: librarychecker.SubmissionOverview.submission_time:type_name -> google.protobuf.Timestamp
	22, // 8: librarychecker.SubmissionInfoResponse.overview:type_name -> librarychecker.SubmissionOverview
	23, // 9: librarychecker.SubmissionInfoResponse.case_results:type_name -> librarychecker.SubmissionCaseResult
	22, // 10: librarychecker.SubmissionListResponse.submissions:type_name -> librarychecker.SubmissionOverview
	34, // 11: librarychecker.HackInfoResponse.overview:type_name -> librarychecker.HackOverview
	47, // 12: librarychecker.HackOverview.hack_time:type_name -> google.protobuf.Timestamp
	34, // 13: librarychecker.HackListResponse.hacks:type_name -> librarychecker.HackOverview
	37, // 14: librarychecker.LangListResponse.langs:type_name -> librarychecker.Lang
	40, // 15: librarychecker.RankingResponse.statistics:type_name -> librarychecker.UserStatistics
	44, // 16: librarychecker.MonitoringResponse.task_queue:type_name -> librarychecker.TaskQueueInfo
	0,  // 17: librarychecker.UserInfoResponse.SolvedMapEntry.value:type_name -> librarychecker.SolvedStatus
	1,  // 18: librarychecker.LibraryCheckerService.Register:input_type -> librarychecker.RegisterRequest
	4,  // 19: librarychecker.LibraryCheckerService.CurrentUserInfo:input_type -> librarychecker.CurrentUserInfoRequest
	6,  // 20: librarychecker.LibraryCheckerService.ChangeCurrentUserInfo:input_type -> librarychecker.ChangeCurrentUserInfoRequest
	8,  // 21: librarychecker.LibraryCheckerService.UserInfo:input_type -> librarychecker.UserInfoRequest
	10, // 22: librarychecker.LibraryCheckerService.ChangeUserInfo:input_type -> librarychecker.ChangeUserInfoRequest
	15, // 23: librarychecker.LibraryCheckerService.ProblemInfo:input_type -> librarychecker.ProblemInfoRequest
	13, // 24: librarychecker.LibraryCheckerService.ProblemList:input_type -> librarychecker.ProblemListRequest
	18, // 25: librarychecker.LibraryCheckerService.ProblemCategories:input_type -> librarychecker.ProblemCategoriesRequest
	20, // 26: librarychecker.LibraryCheckerService.Submit:input_type -> librarychecker.SubmitRequest
	28, // 27: librarychecker.LibraryCheckerService.Rejudge:input_type -> librarychecker.RejudgeRequest
	24, // 28: librarychecker.LibraryCheckerService.SubmissionInfo:input_type -> librarychecker.SubmissionInfoRequest
	26, // 29: librarychecker.LibraryCheckerService.SubmissionList:input_type -> librarychecker.SubmissionListRequest
	30, // 30: librarychecker.LibraryCheckerService.Hack:input_type -> librarychecker.HackRequest
	32, // 31: librarychecker.LibraryCheckerService.HackInfo:input_type -> librarychecker.HackInfoRequest
	35, // 32: librarychecker.LibraryCheckerService.HackList:input_type -> librarychecker.HackListRequest
	38, // 33: librarychecker.LibraryCheckerService.LangList:input_type -> librarychecker.LangListRequest
	41, // 34: librarychecker.LibraryCheckerService.Ranking:input_type -> librarychecker.RankingRequest
	43, // 35: librarychecker.LibraryCheckerService.Monitoring:input_type -> librarychecker.MonitoringRequest
	2,  // 36: librarychecker.LibraryCheckerService.Register:output_type -> librarychecker.RegisterResponse
	5,  // 37: librarychecker.LibraryCheckerService.CurrentUserInfo:output_type -> librarychecker.CurrentUserInfoResponse
	7,  // 38: librarychecker.LibraryCheckerService.ChangeCurrentUserInfo:output_type -> librarychecker.ChangeCurrentUserInfoResponse
	9,  // 39: librarychecker.LibraryCheckerService.UserInfo:output_type -> librarychecker.UserInfoResponse
	11, // 40: librarychecker.LibraryCheckerService.ChangeUserInfo:output_type -> librarychecker.ChangeUserInfoResponse
	16, // 41: librarychecker.LibraryCheckerService.ProblemInfo:output_type -> librarychecker.ProblemInfoResponse
	14, // 42: librarychecker.LibraryCheckerService.ProblemList:output_type -> librarychecker.ProblemListResponse
	19, // 43: librarychecker.LibraryCheckerService.ProblemCategories:output_type -> librarychecker.ProblemCategoriesResponse
	21, // 44: librarychecker.LibraryCheckerService.Submit:output_type -> librarychecker.SubmitResponse
	29, // 45: librarychecker.LibraryCheckerService.Rejudge:output_type -> librarychecker.RejudgeResponse
	25, // 46: librarychecker.LibraryCheckerService.SubmissionInfo:output_type -> librarychecker.SubmissionInfoResponse
	27, // 47: librarychecker.LibraryCheckerService.SubmissionList:output_type -> librarychecker.SubmissionListResponse
	31, // 48: librarychecker.LibraryCheckerService.Hack:output_type -> librarychecker.HackResponse
	33, // 49: librarychecker.LibraryCheckerService.HackInfo:output_type -> librarychecker.HackInfoResponse
	36, // 50: librarychecker.LibraryCheckerService.HackList:output_type -> librarychecker.HackListResponse
	39, // 51: librarychecker.LibraryCheckerService.LangList:output_type -> librarychecker.LangListResponse
	42, // 52: librarychecker.LibraryCheckerService.Ranking:output_type -> librarychecker.RankingResponse
	45, // 53: librarychecker.LibraryCheckerService.Monitoring:output_type -> librarychecker.MonitoringResponse
	36, // [36:54] is the sub-list for method output_type
	18, // [18:36] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_librarychecker_library_checker_proto_init() }
func file_librarychecker_library_checker_proto_init() {
	if File_librarychecker_library_checker_proto != nil {
		return
	}
	file_librarychecker_library_checker_proto_msgTypes[29].OneofWrappers = []any{
		(*HackRequest_Txt)(nil),
		(*HackRequest_Cpp)(nil),
	}
	file_librarychecker_library_checker_proto_msgTypes[32].OneofWrappers = []any{
		(*HackInfoResponse_Txt)(nil),
		(*HackInfoResponse_Cpp)(nil),
	}
	file_librarychecker_library_checker_proto_msgTypes[33].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_librarychecker_library_checker_proto_rawDesc), len(file_librarychecker_library_checker_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_librarychecker_library_checker_proto_goTypes,
		DependencyIndexes: file_librarychecker_library_checker_proto_depIdxs,
		EnumInfos:         file_librarychecker_library_checker_proto_enumTypes,
		MessageInfos:      file_librarychecker_library_checker_proto_msgTypes,
	}.Build()
	File_librarychecker_library_checker_proto = out.File
	file_librarychecker_library_checker_proto_goTypes = nil
	file_librarychecker_library_checker_proto_depIdxs = nil
}
